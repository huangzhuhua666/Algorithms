package offer

import java.util.*

/**
 * Create by hzh on 2020/4/16.
 * 栈的压入、弹出序列
 *
 * 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
 * 假设压入栈的所有数字均不相等。
 * 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
 */
fun main() {
    println(isPopOrder(intArrayOf(1, 2, 3, 4, 5), intArrayOf(4, 5, 3, 2, 1)))
    println(isPopOrder(intArrayOf(1, 2, 3, 4, 5), intArrayOf(4, 3, 5, 1, 2)))
}

private fun isPopOrder(pushA: IntArray, popA: IntArray): Boolean = when {
    pushA.size != popA.size -> false
    else -> {
        val stack = Stack<Int>()

        var j = 0
        for (i in pushA.indices) {
            stack.push(pushA[i])

            while (stack.isNotEmpty() && stack.peek() == popA[j]) {
                stack.pop()
                ++j
            }
        }

        stack.isEmpty()
    }
}